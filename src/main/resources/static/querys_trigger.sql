CREATE DEFINER=`root`@`localhost` TRIGGER `validar_y_actualizar_stock_productos` BEFORE INSERT ON `producto` FOR EACH ROW BEGIN
    DECLARE producto_existente INT;

		if new.id < 30 then 
		
		    -- Verificar si el c贸digo de barras ya existe en la tabla
    SELECT id INTO producto_existente
    FROM producto
    WHERE codigo_barras_id = NEW.codigo_barras_id
    LIMIT 1;

    -- Si ya existe, actualizar el stock en lugar de insertar un nuevo registro
    IF producto_existente IS NOT NULL THEN
        UPDATE producto
        SET stock = stock + NEW.stock
        WHERE codigo_barras_id = NEW.codigo_barras_id;
        
        -- Cancelar la inserci贸n para evitar duplicados
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El c贸digo de barras ya existe, se ha actualizado el stock.';
    END IF;
		
		end if;
END

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `validar_stock_actualizacion` BEFORE UPDATE ON `producto` FOR EACH ROW BEGIN
    DECLARE nuevo_stock INT;

    -- Usamos el valor ingresado por el usuario directamente
    SET nuevo_stock = NEW.stock;

    -- Si el nuevo stock es 0 pero no es por una venta, bloqueamos la actualizaci贸n
    -- if nuevo_stock > 0 then
    
    -- ELSE
    -- IF nuevo_stock = 0 THEN
        -- SIGNAL SQLSTATE '45000'
        -- SET MESSAGE_TEXT = 'Error: No puedes dejar el stock en 0 manualmente. Solo una venta puede reducirlo a 0.';
    -- END IF;
END


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `update_stock` AFTER INSERT ON `detalle_venta` FOR EACH ROW if NEW.producto_id < 30 then 


		UPDATE producto 
        SET stock = stock - NEW.cantidad
        WHERE id = NEW.producto_id;

end if

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `total_venta` AFTER INSERT ON `detalle_venta` FOR EACH ROW -- Actualizar el total en la tabla venta sumando los subtotales de los detalles asociados a la misma venta
    UPDATE ventas 
    SET total_venta = (
        SELECT SUM(sub_total) 
        FROM detalle_venta 
        WHERE venta_id = NEW.venta_id
    )
    WHERE id = NEW.venta_id

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `sub_total_detalle` BEFORE INSERT ON `detalle_venta` FOR EACH ROW SET NEW.sub_total = NEW.cantidad * NEW.precio_unitario

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `restore_stock` AFTER DELETE ON `detalle_venta` FOR EACH ROW if OLD.producto_id < 30 then


UPDATE producto
SET stock = stock + OLD.cantidad
WHERE id = OLD.producto_id;

end IF

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `restar_subtotal_al_eliminar` AFTER DELETE ON `detalle_venta` FOR EACH ROW UPDATE ventas
SET total_venta = total_venta - OLD.sub_total
WHERE id = OLD.venta_id



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `actualizar_total_eliminado` AFTER DELETE ON `detalle_venta` FOR EACH ROW UPDATE ventas
SET total_venta = total_venta - OLD.sub_total
WHERE id = OLD.venta_id


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE DEFINER=`root`@`localhost` TRIGGER `actualizar_detalle_venta` BEFORE UPDATE ON `detalle_venta` FOR EACH ROW BEGIN
    DECLARE diferencia INT;
    DECLARE stock_actual INT;

if  NEW.producto_id < 30 then 


    -- Obtener el stock actual del producto
    SELECT stock INTO stock_actual FROM producto WHERE id = NEW.producto_id;

    -- Calcular diferencia en cantidad
    SET diferencia = NEW.cantidad - OLD.cantidad;

    -- Verificar si hay suficiente stock antes de aumentar la cantidad
    IF diferencia > 0 THEN
        IF stock_actual < diferencia THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Error: No hay suficiente stock disponible.';
        ELSE
            -- Actualizar el stock del producto
            UPDATE producto
            SET stock = stock - diferencia
            WHERE id = NEW.producto_id;
        END IF;
    ELSEIF diferencia < 0 THEN
        -- Si se reduce la cantidad, se devuelve el stock
        UPDATE producto
        SET stock = stock - diferencia
        WHERE id = NEW.producto_id;
    END IF;

    -- Calcular el nuevo subtotal
    SET NEW.sub_total = NEW.cantidad * NEW.precio_unitario;

    -- Actualizar el total de la venta
    UPDATE ventas
    SET total_venta = (
        SELECT SUM(sub_total) FROM detalle_venta WHERE venta_id = NEW.venta_id
    )
    WHERE id = NEW.venta_id;
    
    end if;

END


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////